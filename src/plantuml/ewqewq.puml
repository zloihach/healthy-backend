@startuml

scale 0.75

skinparam linetype ortho

class AuthController {
   constructor(authService: AuthService, cookieService: CookieService): 
   signIn(body: SignInBodyDto, res: Response): Promise<void>
   signUp(signUpDto: SignUpBodyDto, res: Response): Promise<void>
   signOut(res: Response): Promise<void>
   getSessionInfo(session: GetSessionInfoDto): GetSessionInfoDto
}
class VaccineController {
   constructor(vaccineService: VaccineService):
   getAllVaccine(): Promise<Vaccine[]>
   getVaccineById(id: string): Promise<Vaccine>
   createVaccine(createVaccineDto: CreateVaccineDto): Promise<Vaccine>
   updateVaccine(id: string, editVaccineDto: EditVaccineDto): Promise<Vaccine>
   searchVaccine(searchVaccineDto: SearchVaccineDto): Promise<Vaccine[]>
}

class UsersController {
   constructor(userService: UsersService):
   getAllUsers(): Promise<User[]>
   getUserById(id: string): Promise<User | null>
   getUserByEmail(email: string): Promise<User | null>
   getAllUserChild(): Promise<true>
   getUserChildById(id: string): Promise<string>
   activate(id: string): Promise<void>
   deactivateUser(id: string): Promise<void>
}

class PublicationController {
   constructor(publicationService: PublicationService):
   getAllPublications(): Promise<Publication[]>
   getPublicationById(publicationId: string): Promise<Publication>
   createPublication(createPublicationDto: CreatePublicationBodyDto, image: Express.Multer.File): Promise<Publication>
   editPublication(publicationId: string, editPublicationDto: EditPublicationBodyDto): Promise<Publication>
   setPublicationStatus(publicationId: string, setPublicationStatusDto: SetPublicationStatusBodyDto): Promise<Publication>
   searchPublication(searchPublicationDto: SearchPublicationBodyDto): Promise<Publication[]>
}
class AuthService {
   constructor(userService: UsersService, passwordService: PasswordService, jwtService: JwtService, cookieService: CookieService): 
   signUp(signUpBodyDto: SignUpBodyDto): Promise<{accessToken: string}>
   signIn(email: string, password: string): Promise<{accessToken: string}>
   signOut(res: Response): Promise<void>
}
class CookieService {
   tokenKey: string
   setToken(res: Response, token: string): void
   removeToken(res: Response): void
}

class FileService {
   constructor(s3Service: S3Service): 
   uploadFile(dataBuffer: Buffer, filename: string): Promise<string>
   deleteFile(fileKey: string): Promise<void>
}

class PublicationService {
   constructor(db: DbService, fileService: FileService): 
   createPublication(createPublicationBodyDto: CreatePublicationBodyDto): Promise<Publication>
   editPublication(editPublicationDto: EditPublicationBodyDto): Promise<Publication>
   setPublicationStatus(setPublicationStatusDto: SetPublicationStatusBodyDto): Promise<Publication>
   getAllPublications(): Promise<Publication[]>
   getPublicationById(id: number): Promise<Publication>
   searchPublication(searchPublicationDto: SearchPublicationBodyDto): Promise<Publication[]>
   uploadImage(image: {buffer: Buffer; originalname: string}): Promise<string>
   findPublicationById(id: number): Promise<Publication>
}

class S3Service {
   constructor(configService: ConfigService): 
   s3: S3
   bucketName: string
   uploadPublicFile(dataBuffer: Buffer, filename: string): Promise<S3.ManagedUpload.SendData>
   deletePublicFile(fileKey: string): Promise<S3.DeleteObjectOutput>
   listObjects(): Promise<S3.ListObjectsV2Output>
   getObject(key: string): Promise<S3.GetObjectOutput>
   copyObject(sourceKey: string, destinationKey: string): Promise<void>
   deleteObject(key: string): Promise<void>
   deleteBucket(): Promise<void>
   deleteFile(fileKey: string): Promise<void>
}

class UsersService {
   constructor(db: DbService, vaccinationService: VaccinationService): 
   findByEmail(email: string): Promise<User | null>
   getUserById(id: number): Promise<User | null>
   activateUser(id: number): Promise<User>
   create(signUpBodyDto: SignUpBodyDto, salt: string, hash: string): Promise<User>
   getAllUsers(): Promise<User[]>
   setUserStatus(id: number, status: boolean): Promise<User>
   updateUser(id: number, updateUserDto: any): Promise<User>
}
class VaccinationController {
   constructor(vaccinationService: VaccinationService): 
   createVaccination(createVaccinationDto: CreateVaccinationDto): Promise<Prisma__UserVaccineClient<$Resu…
   getUserVaccination(userid: string): Promise<UserVaccine[]>
   updateVaccination(updateVaccinationBodyDto: UpdateVaccinationBodyDto): Promise<UserVaccine>
   setVaccinationStatus(setVaccinationStatusBodyDto: SetVaccinationStatusBodyDto): Promise<UserVaccine>
}
class VaccinationService {
   constructor(db: DbService, vaccineService: VaccineService, userService: UsersService): 
   createVaccination(createVaccinationDto: CreateVaccinationDto): Promise<Prisma__UserVaccineClient<$Resu…
   getUserVaccinations(userId: number): Promise<UserVaccine[]>
   changeVaccinationStatus(setVaccinationStatusBodyDto: SetVaccinationStatusBodyDto): Promise<UserVaccine>
   fillUserVaccinationTable(userId: number): Promise<void>
   createVaccinationCalendar(id: number): Promise<number>
   updateVaccination(updateVaccinationBodyDto: UpdateVaccinationBodyDto): Promise<UserVaccine>
   calculateAgeInMonths(birthdate: Date): number
   formatDate(vaccinationDate: Date | undefined | null): string | null
}

class VaccineService {
   constructor(db: DbService): 
   getAllVaccine(): Promise<Vaccine[]>
   getVaccineById(id: number): Promise<Vaccine>
   createVaccine(createVaccineDto: CreateVaccineDto): Promise<Vaccine>
   updateVaccine(id: number, editVaccineDto: EditVaccineDto): Promise<Vaccine>
   searchVaccine(searchVaccineDto: SearchVaccineDto): Promise<Vaccine[]>
}

class AccessControlService {
   constructor():
   hierarchies: Array<Map<string, number>>
   priority: number
   buildRoles(roles: Role[]): void
   isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams): true | false
}

AuthController         -[#595959,dashed]->  AuthService
AuthController         -[#595959,dashed]->  CookieService         
AuthService            -[#595959,dashed]->  CookieService
AuthService            -[#595959,dashed]->  UsersService
FileService            -[#595959,dashed]->  S3Service
PublicationController  -[#595959,dashed]->  PublicationService    
PublicationService     -[#595959,dashed]->  FileService
UsersController        -[#595959,dashed]->  UsersService
UsersService           -[#595959,dashed]->  VaccinationService
VaccinationController  -[#595959,dashed]->  VaccinationService    
VaccinationService     -[#595959,dashed]->  UsersService
VaccinationService     -[#595959,dashed]->  VaccineService        
VaccineController      -[#595959,dashed]->  VaccineService        
@enduml
